#ifndef MEPHISTO_ARRAY
#define MEPHISTO_ARRAY

#include <alpaka/alpaka.hpp>
#include <initializer_list>

namespace mephisto
{

template<
    typename TType,
    size_t TSize
>
struct array
{
    TType m_data[TSize];

    template<
        typename TInput
    >
    ALPAKA_FN_HOST_ACC
    array(TInput inputArr) {
        size_t i = 0;
        for (auto extent : inputArr) {
            m_data[i++] = extent;
        }
    }

    ALPAKA_FN_HOST_ACC
    array() = default;

    ALPAKA_FN_HOST_ACC
    array(const array &) = default;

    ALPAKA_FN_HOST_ACC
    array(array &&) = default;

    ALPAKA_FN_HOST_ACC
    array(std::initializer_list<TType> ilist) {
        size_t i = 0;
        for(auto extent : ilist) {
            m_data[i++] = extent;
        }
    }

    template<
        typename TIdx
    >
    constexpr
    ALPAKA_FN_HOST_ACC const TType &
    operator[](const TIdx idx) const noexcept {
        return m_data[idx];
    }

    template<
        typename TIdx
    >
    ALPAKA_FN_HOST_ACC TType &
    operator[](const TIdx idx) noexcept {
        return m_data[idx];
    }

    ALPAKA_FN_HOST_ACC const TType *begin() {
        return m_data;
    };

    ALPAKA_FN_HOST_ACC const TType *end() {
        return m_data + size();
    };

    constexpr
    ALPAKA_FN_HOST_ACC size_t
    size() const { return TSize; }

    constexpr
    ALPAKA_FN_HOST_ACC bool
    empty() const noexcept { return size() == 0; }
};

}
#endif
