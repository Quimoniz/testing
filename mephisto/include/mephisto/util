#ifndef MEPHISTO_UTIL_H
#define MEPHISTO_UTIL_H

#include <cstddef>
#include <alpaka/alpaka.hpp>
#include <dash/algorithm/LocalRange.h>

namespace mephisto {

/**
 * Helper to convert std::array to alpaka's Vec
 *
 * alpaka::vec::createVecFromIndexedFn<dim_t, arr_to_vec>(arr)
 */
template <std::size_t n>
struct arr_to_vec {
  template <typename T>
  static constexpr auto create(T &arr)
  {
    return arr[n];
  }
};

template <std::size_t n>
struct unity_vec {
  template <typename T>
  static constexpr auto create(T arg)
  {
    return arg;
  }
};


template <typename T>
auto buf_size(T vec)
{
  return alpaka::vec::Vec<alpaka::dim::DimInt<1>, size_t>::all(
      std::distance(vec.begin(), vec.end()));
}

template <typename T>
auto buf_size(dash::LocalRange<T> range)
{
  return alpaka::vec::Vec<alpaka::dim::DimInt<1>, size_t>::all(
      std::distance(range.begin, range.end));
}

}  // namespace mephisto

#endif
