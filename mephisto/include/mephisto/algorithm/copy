#ifndef MEPHISTO_COPY
#define MEPHISTO_COPY

#include <mephisto/type_traits>
#include <alpaka/alpaka.hpp>
#include <mephisto/array>
#include <iostream>

namespace mephisto {

/**
 * Copy the elements and metadata from the host buffer to the device buffer
 */
template <typename QueueT, typename BufT>
void put(QueueT &queue, BufT &hostBuf)
{
    alpaka::vec::Vec<alpaka::dim::DimInt<1u>, size_t> const extent =
        hostBuf.datasize;
    auto  deviceMeta = hostBuf.getDeviceMetaView();
    auto  hostMeta   = hostBuf.getHostMetaView();
    auto  deviceData = hostBuf.getDeviceDataView();
    auto &hostData   = hostBuf.getHostDataView();
    // Copy metadata to the beginning of the buffer on the device
    alpaka::mem::view::copy(queue, deviceMeta, hostMeta, 1);
    // Copy the actual elements
    alpaka::mem::view::copy(queue, deviceData, hostData, extent);
};


/**
 * Copy the elements from the device buffer to the host buffer
 */
template <typename QueueT, typename BufT>
void get(QueueT &queue, BufT &hostBuf)
{
    alpaka::vec::Vec<alpaka::dim::DimInt<1u>, size_t> const extent =
        hostBuf.datasize;
    auto  deviceData = hostBuf.getDeviceDataView();
    auto &hostData   = hostBuf.getHostDataView();
    // Copy the actual elements
    alpaka::mem::view::copy(queue, hostData, deviceData, extent);
};
}

#endif
