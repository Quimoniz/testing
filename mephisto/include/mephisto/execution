#ifndef MEPHISTO_EXECUTION_H
#define MEPHISTO_EXECUTION_H


#include <alpaka/alpaka.hpp>
#include <libdash.h>
#include <mephisto/buffer>
#include <mephisto/algorithm/copy>
#include <mephisto/algorithm/for_each>

namespace mephisto {
namespace execution {


/**
 * An executor that uses alpaka to do the work.
 */
template<class Kernel, class AlpakaContext, bool CopyBack = false>
struct AlpakaExecutor {
    AlpakaContext ctx;

    // we cheat a bit and use begin and end as the shape
    template <typename IterT>
    using shape_type = std::pair<IterT, IterT>;
    using Acc        = typename AlpakaContext::acc_t;
    using SizeT      = size_t;

    AlpakaExecutor(AlpakaContext context)
      : ctx(context)
    {
    }

    template <class Function, class IterT, class SharedState>
    void bulk_execute(
        Function executorFunc, shape_type<IterT> shape, SharedState state)
    {
        using ElementT = typename IterT::value_type;
        using PatternT = typename IterT::pattern_type;

        // ---------------------------------------------
        // Copy data to the accelerator
        // ---------------------------------------------
        auto begin = std::get<0>(shape);
        auto end = std::get<1>(shape);
        SizeT nelems = std::distance(begin, end);
        assert(nelems >= 0);

        alpaka::vec::Vec<alpaka::dim::DimInt<1u>, SizeT> const extent(nelems);

        alpaka::workdiv::WorkDivMembers<alpaka::dim::DimInt<1u>, SizeT> const
            workDiv(alpaka::workdiv::getValidWorkDiv<Acc>(
                ctx.accDevice,
                extent,
                static_cast<SizeT>(1u),
                false,
                alpaka::workdiv::GridBlockExtentSubDivRestrictions::
                    Unrestricted));

        // create the host buffer
        auto hostBuf = mephisto::HostDataBuffer<
            ElementT,
            AlpakaContext,
            PatternT,
            dash::GlobIter<ElementT, PatternT>>(ctx, begin, end);


        // copy the buffer to the device
        mephisto::put(ctx.stream, hostBuf);

        // get the buffer on the device
        auto deviceBuf = hostBuf.getDeviceDataBuffer();

        Kernel kernel;

        // ---------------------------------------------
        // Execute the kernel
        // ---------------------------------------------
        //
        auto const forEach(alpaka::exec::create<Acc>(
            workDiv, kernel, deviceBuf, nelems, executorFunc));

        alpaka::stream::enqueue(ctx.stream, forEach);

        if (CopyBack) {
          // copy the buffer to the device
          mephisto::get(ctx.stream, hostBuf);
        }
    }

    template<class Policy>
    AlpakaExecutor require(Policy &) {
        return *this;
    }

    AlpakaContext &context()
    {
        return ctx;
    }
};

template <class Kernel, class AlpakaContext>
using AlpakaOneWayExecutor = AlpakaExecutor<Kernel, AlpakaContext, false>;

template <class Kernel, class AlpakaContext>
using AlpakaTwoWayExecutor = AlpakaExecutor<Kernel, AlpakaContext, true>;

template <class AccT, class HostDevice, class AccDevice, class Stream>
struct AlpakaExecutionContext {
  using host_t   = typename std::remove_cv<HostDevice>::type;
  using device_t = typename std::remove_cv<AccDevice>::type;
  using acc_t    = AccT;

  HostDevice &hostDevice;
  AccDevice & accDevice;
  Stream &    stream;

  AlpakaExecutionContext(HostDevice &host, AccDevice &acc, Stream &stream)
    : hostDevice(host)
    , accDevice(acc)
    , stream(stream)
  {
  }
};

template <class AccT, class HostDevice, class AccDevice, class Stream>
AlpakaExecutionContext<AccT, HostDevice, AccDevice, Stream> make_context(
    HostDevice &host, AccDevice &acc, Stream &stream)
{
    return AlpakaExecutionContext<AccT, HostDevice, AccDevice, Stream>(
        host, acc, stream);
}

// See C++17's std::execution::par
// Additionally we enforce that the policy has an executor
template <class Executor>
struct ParallelPolicy {
  Executor ex;

  ParallelPolicy(Executor ex)
    : ex(ex)
  {
  }

  const Executor &executor() const
  {
    return ex;
  }
};

template <class Executor>
ParallelPolicy<Executor> make_parallel_policy(Executor ex)
{
    return ParallelPolicy<Executor>(ex);
}
}
}

namespace dash {

template <class Executor>
struct is_execution_policy<mephisto::execution::ParallelPolicy<Executor>>
    : std::true_type {
};

template <class Executor>
struct has_executor<mephisto::execution::ParallelPolicy<Executor>>
    : std::true_type {
};

}

#endif
